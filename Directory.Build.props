<Project>

    <!-- This also appears in the NuGet packages if they are created -->
    <!--<PropertyGroup>
        <Version>1.0.0.0</Version>
    </PropertyGroup>-->

    <PropertyGroup>
        <TargetFrameworks>net8.0</TargetFrameworks>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>
    </PropertyGroup>

    <!-- If you want to create your own assembly metadata somehow you need to switch off the automatic stuff -->
    <!--<PropertyGroup>
        <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    </PropertyGroup>-->

    <!-- Simplified output path -->

    <!-- New .NET SDK 8 build output stuff, https://devblogs.microsoft.com/dotnet/announcing-dotnet-8-preview-3/> -->
    <PropertyGroup>
        <UseArtifactsOutput>true</UseArtifactsOutput>
        <!--<ArtifactsPath>VS17</ArtifactsPath>-->

        <!-- This seems to effect the obj directory tree as well so probably won't work -->
        <!--<ArtifactsProjectName>Unused</ArtifactsProjectName>-->

        <!-- This was suggested here https://github.com/dotnet/designs/pull/281#issuecomment-1547049833 but also effects the obj tree -->
        <!-- https://github.com/dotnet/sdk/blob/main/src/Tasks/Microsoft.NET.Build.Tasks/sdk/Sdk.props for setting of BaseIntermediateOutputPath -->
        <!--<IncludeProjectNameInArtifactsPaths>false</IncludeProjectNameInArtifactsPaths>-->
    </PropertyGroup>

    <PropertyGroup>
        <WarningLevel>4</WarningLevel>
        <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    </PropertyGroup>


    <!-- NuGet packages -->

    <ItemGroup>
        <PackageReference Include="NuGetizer"/>
    </ItemGroup>

    <!-- If this is not set then you have to manualy pack projects -->
    <PropertyGroup>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    </PropertyGroup>

    <PropertyGroup>
        <Authors>David Hunter</Authors>
    </PropertyGroup>


    <!-- SourceLink stuff -->

    <ItemGroup>
        <PackageReference Include="Microsoft.SourceLink.GitHub" PrivateAssets="all"/>
    </ItemGroup>

    <PropertyGroup>
        <PublishRepositoryUrl>true</PublishRepositoryUrl>
    </PropertyGroup>

    <!-- This tells Nugetizer to embed the .PDB into the .nuget package -->
    <PropertyGroup>
        <PackBuildOutput>true</PackBuildOutput>
    </PropertyGroup>

    <!-- See https://github.com/dotnet/sourcelink/blob/main/docs/README.md for some stuff -->
    <!-- The .snupkg file can be published along with the .nuget file -->
    <!-- https://learn.microsoft.com/en-us/nuget/create-packages/symbol-packages-snupkg#nugetorg-symbol-server -->
    <!-- These seem to be ignored when using Nugetizer -->
    <PropertyGroup>
        <!--<IncludeSymbols>true</IncludeSymbols>-->
        <!--<SymbolPackageFormat>snupkg</SymbolPackageFormat>-->
    </PropertyGroup>

    <!-- The alternative to the above seems to be to embed to PDB into the DLL -->
    <!-- https://learn.microsoft.com/en-us/dotnet/core/deploying/single-file/overview?tabs=cli#include-pdb-files-inside-the-bundle -->
    <PropertyGroup>
        <!--<DebugType>embedded</DebugType>-->
    </PropertyGroup>

    <!-- I think you can use these either with snupkg or DebugType=embedded -->
    <PropertyGroup>
        <!-- This embeds all source files into the PDB -->
        <!--<EmbedAllSources>true</EmbedAllSources>-->

        <!-- This is used to embed files not in source control, it is ignred if EmbedAllSources is set  -->
        <!--<EmbedUntrackedSources>true</EmbedUntrackedSources>-->
    </PropertyGroup>


    <!-- Combo libraries -->
    <!-- .NET assemblies dont support multi file assemblies, https://learn.microsoft.com/en-us/dotnet/framework/app-domains/build-multifile-assembly -->
    <!-- .NET Core seems to realize this is a problem https://github.com/dotnet/runtime/issues/68761 -->

    <!-- netmodules, possibly for creating combo assemblies -->
    <!-- Set <OutputType>Module</OutputType> to produce a .netmodule -->

    <!-- Set this if you want to build netmodules as you can't have a refernce assembly to a .netmodule  -->
    <!--<PropertyGroup>
        <ProduceReferenceAssembly>false</ProduceReferenceAssembly>
    </PropertyGroup>-->

</Project>